//+------------------------------------------------------------------+
//|                                                BuyBuy_Single.mq5 |
//|                        Copyright 2025, Manus AI Agent        |
//|                                                                  |
//+------------------------------------------------------------------+
#property copyright "Manus AI Agent"
#property link      ""
#property version   "1.00"
#property strict
#property description "Expert Advisor que opera um grid de compra no s√≠mbolo atual."

#include <Trade/Trade.mqh>
#include <Trade/PositionInfo.mqh>

//--- Input parameters
input double GridLotSize     = 0.01;    // Fixed Lot Size for grid buy orders
input double InitialSellLot  = 0.1;     // Lot Size for initial sell order
input int    GridStepPips    = 500;     // Grid Step in Pips
input int    TakeProfitPips  = 500;     // Take Profit in Pips for each order
input ulong  MagicNumber     = 67890;   // EA Magic Number

//--- Global variables
CTrade          trade;
CPositionInfo   posInfo;

// Structure to hold symbol-specific data
struct SymbolData
{
   string          name;
   double          gridStepPoints;
   double          takeProfitPoints;
   double          pointValue;
   int             digits;
   double          minLot;
   double          maxLot;
   double          lotStep;
   bool            isTradingAllowed;
};

// Symbol data for current symbol
SymbolData currentSymbol;

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
{
   Print("Initializing BuyBuy Single-Symbol EA...");

   //--- Initialize trade object
   trade.SetExpertMagicNumber(MagicNumber);
   trade.SetDeviationInPoints(5); // Allow 5 points deviation
   trade.SetTypeFilling(ORDER_FILLING_FOK); // Use FOK for simplicity, adjust if needed

   //--- Get current symbol name
   string symbolName = _Symbol;
   
   //--- Initialize data for current symbol
   if(!InitializeSymbolData(symbolName, currentSymbol))
   {
      PrintFormat("Failed to initialize symbol: %s", symbolName);
      return(INIT_FAILED);
   }

   Print("BuyBuy Single-Symbol EA Initialized Successfully.");
   PrintFormat("Operating on: %s", currentSymbol.name);
   PrintFormat("Initial Sell Lot: %.2f, Grid Buy Lot: %.2f, Grid Step: %d pips, TP: %d pips", InitialSellLot, GridLotSize, GridStepPips, TakeProfitPips);

   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Initialize data for a specific symbol                            |
//+------------------------------------------------------------------+
bool InitializeSymbolData(const string symbolName, SymbolData &symbolData)
{
   symbolData.name = symbolName;

   //--- Ensure symbol is available in Market Watch
   if(!SymbolSelect(symbolName, true))
   {
      PrintFormat("Error: Symbol %s not found or not enabled in Market Watch. Please add it.", symbolName);
      return(false);
   }

   //--- Wait for symbol info to be available
   int retries = 10;
   while(SymbolInfoDouble(symbolName, SYMBOL_POINT) == 0 && retries > 0)
   {
      Sleep(500);
      retries--;
   }

   symbolData.pointValue = SymbolInfoDouble(symbolName, SYMBOL_POINT);
   if(symbolData.pointValue == 0)
   {
      PrintFormat("Error: Could not get point value for %s.", symbolName);
      return(false);
   }

   symbolData.digits = (int)SymbolInfoInteger(symbolName, SYMBOL_DIGITS);
   symbolData.gridStepPoints = GridStepPips * symbolData.pointValue;
   symbolData.takeProfitPoints = TakeProfitPips * symbolData.pointValue;
   symbolData.minLot = SymbolInfoDouble(symbolName, SYMBOL_VOLUME_MIN);
   symbolData.maxLot = SymbolInfoDouble(symbolName, SYMBOL_VOLUME_MAX);
   symbolData.lotStep = SymbolInfoDouble(symbolName, SYMBOL_VOLUME_STEP);
   symbolData.isTradingAllowed = SymbolInfoInteger(symbolName, SYMBOL_TRADE_MODE) != SYMBOL_TRADE_MODE_DISABLED;

   //--- Validate GridLotSize
   if(GridLotSize < symbolData.minLot || GridLotSize > symbolData.maxLot || fmod(GridLotSize, symbolData.lotStep) > 0.0000001)
   {
      PrintFormat("Error: Grid lot size %.2f is invalid for %s (Min: %.2f, Max: %.2f, Step: %.2f).",
                  GridLotSize, symbolName, symbolData.minLot, symbolData.maxLot, symbolData.lotStep);
      return(false);
   }

   //--- Validate InitialSellLot
   if(InitialSellLot < symbolData.minLot || InitialSellLot > symbolData.maxLot || fmod(InitialSellLot, symbolData.lotStep) > 0.0000001)
   {
      PrintFormat("Error: Initial sell lot size %.2f is invalid for %s (Min: %.2f, Max: %.2f, Step: %.2f).",
                  InitialSellLot, symbolName, symbolData.minLot, symbolData.maxLot, symbolData.lotStep);
      return(false);
   }

   if(!symbolData.isTradingAllowed)
   {
       PrintFormat("Warning: Trading is disabled for symbol %s.", symbolName);
   }

   PrintFormat("Initialized data for %s: Point=%.*f, Digits=%d, GridPoints=%.*f, TPPoints=%.*f, Trading Allowed: %s",
               symbolName,
               symbolData.digits, symbolData.pointValue,
               symbolData.digits,
               symbolData.digits, symbolData.gridStepPoints,
               symbolData.digits, symbolData.takeProfitPoints,
               symbolData.isTradingAllowed ? "Yes" : "No");

   return(true);
}

//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
   Print("BuyBuy Single-Symbol EA Deinitialized. Reason: ", reason);
   //--- Optional: Close positions on deinit
   // CloseAllPositions();
}

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
{
   //--- Check if trading is allowed globally
   if(!TerminalInfoInteger(TERMINAL_TRADE_ALLOWED) || !MQLInfoInteger(MQL_TRADE_ALLOWED))
      return;

   //--- Manage grid for current symbol
   if(currentSymbol.isTradingAllowed)
   {
      ManageGrid(currentSymbol);
   }
}

//+------------------------------------------------------------------+
//| Manage the sell and buy grid for the current symbol              |
//+------------------------------------------------------------------+
void ManageGrid(SymbolData &symbolData)
{
   //--- Get current price
   double currentAsk = SymbolInfoDouble(symbolData.name, SYMBOL_ASK);
   double currentBid = SymbolInfoDouble(symbolData.name, SYMBOL_BID);
   if(currentAsk == 0 || currentBid == 0) // Check for valid price
   {
      return;
   }

   //--- Check if we have any positions for this EA
   bool hasInitialSell = false;
   double lowestBuyPrice = DBL_MAX;
   int buyPositionsCount = 0;
   int totalPositions = PositionsTotal();

   for(int i = totalPositions - 1; i >= 0; i--)
   {
      if(posInfo.SelectByIndex(i) && posInfo.Magic() == MagicNumber && posInfo.Symbol() == symbolData.name)
      {
         if(posInfo.PositionType() == POSITION_TYPE_SELL)
         {
            hasInitialSell = true;
         }
         else if(posInfo.PositionType() == POSITION_TYPE_BUY)
         {
            buyPositionsCount++;
            if(posInfo.PriceOpen() < lowestBuyPrice)
            {
               lowestBuyPrice = posInfo.PriceOpen();
            }
         }
      }
   }

   //--- If no sell position exists, open the initial sell order
   if(!hasInitialSell)
   {
      double sellTpPrice = NormalizeDouble(currentBid - symbolData.takeProfitPoints, symbolData.digits);
      PrintFormat("[%s] No initial sell position. Placing initial sell order at market (Bid: %.5f), TP: %.5f, Lot: %.2f",
                  symbolData.name, currentBid, sellTpPrice, InitialSellLot);
      if(!trade.Sell(InitialSellLot, symbolData.name, currentBid, 0, sellTpPrice, "Initial Sell"))
      {
         PrintFormat("[%s] Error placing initial sell order: %d - %s", symbolData.name, trade.ResultRetcode(), trade.ResultComment());
      }
      return; // Exit after placing initial sell order
   }

   //--- If no buy positions exist, open the first buy order
   if(buyPositionsCount == 0)
   {
      double buyTpPrice = NormalizeDouble(currentAsk + symbolData.takeProfitPoints, symbolData.digits);
      PrintFormat("[%s] No open buy positions. Placing initial buy order at market (Ask: %.5f), TP: %.5f, Lot: %.2f",
                  symbolData.name, currentAsk, buyTpPrice, GridLotSize);
      if(!trade.Buy(GridLotSize, symbolData.name, currentAsk, 0, buyTpPrice, "Initial Buy Grid"))
      {
         PrintFormat("[%s] Error placing initial buy order: %d - %s", symbolData.name, trade.ResultRetcode(), trade.ResultComment());
      }
      return; // Exit after placing initial buy order
   }

   //--- If buy positions exist, check if a new grid level is reached
   double nextBuyLevel = NormalizeDouble(lowestBuyPrice - symbolData.gridStepPoints, symbolData.digits);

   // Check if price has dropped below the next grid level
   if(currentAsk <= nextBuyLevel + symbolData.pointValue)
   {
      // Check if an order already exists very close to this level to prevent duplicates
      bool orderExistsNearLevel = false;
      for(int i = totalPositions - 1; i >= 0; i--)
      {
         if(posInfo.SelectByIndex(i) && posInfo.Magic() == MagicNumber && posInfo.Symbol() == symbolData.name && posInfo.PositionType() == POSITION_TYPE_BUY)
         {
            // Check if open price is within a small range of the target level
            if(MathAbs(posInfo.PriceOpen() - nextBuyLevel) < (symbolData.gridStepPoints / 2.0))
            {
               orderExistsNearLevel = true;
               break;
            }
         }
      }

      if(!orderExistsNearLevel)
      {
         double buyTpPrice = NormalizeDouble(currentAsk + symbolData.takeProfitPoints, symbolData.digits);
         PrintFormat("[%s] Price (%.5f) reached next grid level (%.5f). Placing new buy order. TP: %.5f, Lot: %.2f",
                     symbolData.name, currentAsk, nextBuyLevel, buyTpPrice, GridLotSize);
         if(!trade.Buy(GridLotSize, symbolData.name, currentAsk, 0, buyTpPrice, "Grid Buy"))
         {
            PrintFormat("[%s] Error placing grid buy order: %d - %s", symbolData.name, trade.ResultRetcode(), trade.ResultComment());
         }
      }
   }
}

//+------------------------------------------------------------------+
//| Close all positions for current symbol                           |
//+------------------------------------------------------------------+
void CloseAllPositions()
{
   int totalPositions = PositionsTotal();
   PrintFormat("Attempting to close all positions for %s (Magic: %d)...", currentSymbol.name, MagicNumber);
   
   for(int i = totalPositions - 1; i >= 0; i--)
   {
      if(posInfo.SelectByIndex(i) && posInfo.Magic() == MagicNumber && posInfo.Symbol() == currentSymbol.name)
      {
         PrintFormat("Closing position #%d (%s %.2f @ %.5f) for %s",
                     posInfo.Ticket(),
                     (posInfo.PositionType() == POSITION_TYPE_BUY ? "Buy" : "Sell"),
                     posInfo.Volume(),
                     posInfo.PriceOpen(),
                     currentSymbol.name);
         if(!trade.PositionClose(posInfo.Ticket()))
         {
            PrintFormat("Error closing position #%d: %d - %s", posInfo.Ticket(), trade.ResultRetcode(), trade.ResultComment());
         }
         else
         {
             PrintFormat("Position #%d closed successfully.", posInfo.Ticket());
         }
      }
   }
}

//+------------------------------------------------------------------+
//| Get symbol statistics                                             |
//+------------------------------------------------------------------+
void PrintSymbolStatistics()
{
   int buyPositions = 0;
   int sellPositions = 0;
   double totalVolume = 0;
   double totalProfit = 0;
   
   int totalPositions = PositionsTotal();
   for(int i = totalPositions - 1; i >= 0; i--)
   {
      if(posInfo.SelectByIndex(i) && posInfo.Magic() == MagicNumber && posInfo.Symbol() == currentSymbol.name)
      {
         if(posInfo.PositionType() == POSITION_TYPE_BUY)
            buyPositions++;
         else
            sellPositions++;
         
         totalVolume += posInfo.Volume();
         totalProfit += posInfo.Profit();
      }
   }
   
   PrintFormat("[%s] Statistics - Buy Positions: %d, Sell Positions: %d, Total Volume: %.2f, Total Profit: %.2f",
               currentSymbol.name, buyPositions, sellPositions, totalVolume, totalProfit);
}
//+------------------------------------------------------------------+
