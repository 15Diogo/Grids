//+------------------------------------------------------------------+
//|                                              Zone Recovery EA.mq5 |
//|                          Copyright 2025, MetaQuotes Software Corp |
//|                                                                   |
//+------------------------------------------------------------------+
#property copyright "Copyright 2025"
#property link      ""
#property version   "1.03"

// Input parameters
input string GeneralSettings = "--- General Settings ---"; // General Settings
input double InitialLot = 0.01;        // Initial Lot Size
input int TakeProfit = 30;             // Take Profit in points
input int ZoneSize = 1000;              // Zone Size in points (distance between trades)
input double LotMultiplier = 0.01;      // Multiplier for lot size on each level
input int MaxTrades = 1000;               // Maximum number of trades
input ENUM_POSITION_TYPE DefaultDirection = POSITION_TYPE_BUY; // Default trade direction

input string TradeSettings = "--- Trade Management ---"; // Trade Management
input bool UseTrailingStop = true;    // Use Trailing Stop
input int TrailingDistance = 20;       // Trailing Stop Distance in points
input int BreakEvenProfit = 15;         // Points in profit to move to break even
input int BreakEvenDistance = 4;       // Break even distance in points

// Additional debug settings
input string DebugSettings = "--- Debug Settings ---"; // Debug Settings
input bool IsDebugMode = true;         // Enable detailed debug messages
input bool ForceOpenBuy = true;       // Force open a BUY trade (for testing)
input bool ForceOpenSell = true;      // Force open a SELL trade (for testing)
input bool ContinuousTrading = true;   // Continue trading after closing all positions

// Trading objects
#include <Trade/Trade.mqh>
CTrade trade;

// Global variables
int zoneRecoveryMagic = 12345678910111213141516;        // Magic number for orders
double point;                          // Point value
int zoneDirection = 1;                 // Direction of current zone recovery (1=buy, -1=sell, 0=none)
int totalTrades = 0;                   // Total number of trades in the current series
datetime lastActionTime = 0;           // Time of last trading action
bool forceNewTrade = true;            // Flag to force a new trade after closing all positions

//+------------------------------------------------------------------+
//| Expert initialization function                                    |
//+------------------------------------------------------------------+
int OnInit()
{
   // Initialize point value based on digits
   point = _Point;
   
   // Set Magic number for all trades
   trade.SetExpertMagicNumber(zoneRecoveryMagic);
   
   // Set timer for regular checks (every 5 seconds)
   EventSetTimer(5);
   
   // Debug messages
   Print("=================================================");
   Print("Zone Recovery EA initialized (Continuous Trading Version)");
   Print("Symbol: ", _Symbol);
   Print("Point value: ", point);
   Print("Initial lot: ", InitialLot);
   Print("Magic number: ", zoneRecoveryMagic);
   Print("Continuous Trading Mode: ", ContinuousTrading ? "ON" : "OFF");
   
   // Check if AutoTrading is enabled
   if(!TerminalInfoInteger(TERMINAL_TRADE_ALLOWED))
   {
      Print("WARNING: AutoTrading is not enabled! Enable AutoTrading in the terminal.");
   }
   
   // Check account trade modes
   if(!AccountInfoInteger(ACCOUNT_TRADE_EXPERT))
   {
      Print("WARNING: Expert Advisors trading is disabled for this account!");
   }
   
   if(!AccountInfoInteger(ACCOUNT_TRADE_ALLOWED))
   {
      Print("WARNING: Trading is not allowed for this account!");
   }
   
   Print("=================================================");
   
   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Expert deinitialization function                                  |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
   // Kill timer
   EventKillTimer();
      
   Print("Zone Recovery EA deinitialized with reason code: ", reason);
}

//+------------------------------------------------------------------+
//| Expert tick function                                              |
//+------------------------------------------------------------------+
void OnTick()
{
   // Main processing function that will handle trading logic
   ProcessTrading();
}

//+------------------------------------------------------------------+
//| Timer event handler                                               |
//+------------------------------------------------------------------+
void OnTimer()
{
   // Use timer to regularly check market conditions
   ProcessTrading();
}

//+------------------------------------------------------------------+
//| Main trading logic function                                       |
//+------------------------------------------------------------------+
void ProcessTrading()
{
   // Count trades and get the current zone direction
   CountZoneTrades();
   
   // Check for force trade (debug mode)
   if(totalTrades == 0 || forceNewTrade)
   {
      // Reset force new trade flag
      forceNewTrade = false;
      
      // Force open a BUY trade if specified
      if(ForceOpenBuy)
      {
         Print("DEBUG: Force BUY trade enabled - attempting to open a BUY trade...");
         OpenTrade(POSITION_TYPE_BUY);
         ResetForceOpenFlags();
         return;
      }
      
      // Force open a SELL trade if specified
      if(ForceOpenSell)
      {
         Print("DEBUG: Force SELL trade enabled - attempting to open a SELL trade...");
         OpenTrade(POSITION_TYPE_SELL);
         ResetForceOpenFlags();
         return;
      }
   }
   
   // If we have no trades, immediately open a trade using default direction
   if(totalTrades == 0 || forceNewTrade)
   {
      // Reset force new trade flag
      forceNewTrade = false;
      
      // No filters - just open a trade in the default direction
      OpenTradeWithoutFilters();
   }
   else
   {
      // Print trade status regularly
      if(IsDebugMode)
      {
         double totalProfit = CalculateTotalProfit();
         Print("Active trades: ", totalTrades, ", Direction: ", 
               zoneDirection == 1 ? "BUY" : "SELL", ", Total profit: ", 
               DoubleToString(totalProfit, 2), " ", AccountInfoString(ACCOUNT_CURRENCY));
      }
   }
   
   // Manage existing trades (recovery, trailing, break even)
   ManageOpenTrades();
}

//+------------------------------------------------------------------+
//| Reset force open flags to prevent continuous order placement      |
//+------------------------------------------------------------------+
void ResetForceOpenFlags()
{
   // We can't directly modify input variables, so we need to work around this
   // Just logging that it would be reset in a real scenario
   Print("NOTE: Force trade flags would be reset in non-input variables");
}

//+------------------------------------------------------------------+
//| Count trades in the current zone recovery series                  |
//+------------------------------------------------------------------+
void CountZoneTrades()
{
   totalTrades = 0;
   zoneDirection = 0;
   
   // Loop through all positions
   for(int i = PositionsTotal() - 1; i >= 0; i--)
   {
      ulong ticket = PositionGetTicket(i);
      if(PositionSelectByTicket(ticket))
      {
         long magic = PositionGetInteger(POSITION_MAGIC);
         string symbol = PositionGetString(POSITION_SYMBOL);
         
         if(magic == zoneRecoveryMagic && symbol == _Symbol)
         {
            totalTrades++;
            
            // Determine zone direction from the first trade found
            if(zoneDirection == 0)
            {
               if(PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY)
                  zoneDirection = 1;
               else if(PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_SELL)
                  zoneDirection = -1;
            }
         }
      }
   }
}

//+------------------------------------------------------------------+
//| Open new trade without any filtering (REMOVED FILTERS)            |
//+------------------------------------------------------------------+
void OpenTradeWithoutFilters()
{
   // Simply open a trade in the default direction without any filters
   Print("Opening trade with default direction without filters");
   OpenTrade(DefaultDirection);
}

//+------------------------------------------------------------------+
//| Open a new trade                                                  |
//+------------------------------------------------------------------+
void OpenTrade(ENUM_POSITION_TYPE type)
{
   // Set up trading parameters
   double volume = InitialLot;
   double sl = 0.0; // No stop loss for zone recovery
   double tp = 0.0;
   
   // Check minimum lot size restrictions
   double minLot = SymbolInfoDouble(_Symbol, SYMBOL_VOLUME_MIN);
   double maxLot = SymbolInfoDouble(_Symbol, SYMBOL_VOLUME_MAX);
   double lotStep = SymbolInfoDouble(_Symbol, SYMBOL_VOLUME_STEP);
   
   if(volume < minLot)
   {
      Print("WARNING: Initial lot ", volume, " is below minimum lot size ", minLot, ". Adjusting to minimum.");
      volume = minLot;
   }
   
   if(volume > maxLot)
   {
      Print("WARNING: Initial lot ", volume, " is above maximum lot size ", maxLot, ". Adjusting to maximum.");
      volume = maxLot;
   }
   
   // Normalize volume according to lot step
   volume = NormalizeDouble(MathFloor(volume / lotStep) * lotStep, 2);
   
   if(type == POSITION_TYPE_BUY)
   {
      tp = SymbolInfoDouble(_Symbol, SYMBOL_ASK) + TakeProfit * point;
      Print("Trying to BUY at market price, TP: ", tp, ", Lot: ", volume);
   }
   else
   {
      tp = SymbolInfoDouble(_Symbol, SYMBOL_BID) - TakeProfit * point;
      Print("Trying to SELL at market price, TP: ", tp, ", Lot: ", volume);
   }
   
   // Execute trade using CTrade without any filters or checks
   bool result = false;
   if(type == POSITION_TYPE_BUY)
      result = trade.Buy(volume, _Symbol, 0, sl, tp, "Zone Recovery EA");
   else
      result = trade.Sell(volume, _Symbol, 0, sl, tp, "Zone Recovery EA");
   
   // Check result
   if(result)
   {
      Print("Trade executed: ", EnumToString(type), " result: ", trade.ResultRetcode(), ", Ticket: ", trade.ResultOrder());
      totalTrades = 1;
      zoneDirection = (type == POSITION_TYPE_BUY) ? 1 : -1;
      lastActionTime = TimeCurrent();
      forceNewTrade = false;  // Reset the force new trade flag
   }
   else
   {
      Print("ERROR: Failed to open trade - result code: ", trade.ResultRetcode(), 
            ", Comment: ", trade.ResultComment(), ", Error: ", GetLastError());
            
      // Print trade context and error details
      PrintTradeContextError();
   }
}

//+------------------------------------------------------------------+
//| Print detailed trade context errors                               |
//+------------------------------------------------------------------+
void PrintTradeContextError()
{
   int lastError = GetLastError();
   
   Print("Last error code: ", lastError, " - check details below");
   
   // Check common trading errors
   if(lastError == 4109) // TRADE_RETCODE_DONE
      Print("Trade operation completed successfully");
   else if(lastError == 4051) // TRADE_RETCODE_REJECT 
      Print("Request rejected by trade server");
   else if(lastError == 4063) // TRADE_RETCODE_VOLUME_LIMIT
      Print("Volume limit exceeded");
   else if(lastError == 4064) // TRADE_RETCODE_LIMIT_VOLUME
      Print("Position limit reached");
   else if(lastError == 4065) // TRADE_RETCODE_LIMIT_ORDERS
      Print("Orders limit reached");
   else if(lastError == 4108) // TRADE_RETCODE_NO_CHANGES
      Print("No changes in request");
   
   // Print trade context info
   Print("Check if context is busy: ", !TerminalInfoInteger(TERMINAL_TRADE_ALLOWED) ? "YES" : "NO");
   Print("Check if trade is allowed: ", !MQLInfoInteger(MQL_TRADE_ALLOWED) ? "NO" : "YES");
   Print("Check if EA trading is allowed: ", !AccountInfoInteger(ACCOUNT_TRADE_EXPERT) ? "NO" : "YES");
}

//+------------------------------------------------------------------+
//| Manage existing trades for zone recovery                          |
//+------------------------------------------------------------------+
void ManageOpenTrades()
{
   // If no trades, nothing to manage
   if(totalTrades == 0)
      return;
      
   // Calculate total profit of all trades
   double totalProfit = CalculateTotalProfit();
   
   // Check if we should close all trades with profit
   if(totalProfit > 0)
   {
      if(CloseAllTrades())
      {
         Print("Closed all trades with profit: ", totalProfit);
         
         // In continuous trading mode, set flag to immediately open a new trade
         if(ContinuousTrading)
         {
            Print("Continuous trading mode enabled. Will open new trade immediately.");
            forceNewTrade = true;
         }
         
         // Reset trade counters
         totalTrades = 0;
         zoneDirection = 0;
         return;
      }
   }
   
   // Always allow opening recovery trades regardless of MaxTrades limit
   // by removing the if(totalTrades < MaxTrades) condition
   
   // Check if we need to open a recovery trade
   double entryPrice = GetAverageEntryPrice();
   double currentPrice = (zoneDirection == 1) ? 
                        SymbolInfoDouble(_Symbol, SYMBOL_BID) : 
                        SymbolInfoDouble(_Symbol, SYMBOL_ASK);
                        
   double distance = MathAbs(entryPrice - currentPrice) / point;
   
   if(IsDebugMode)
   {
      Print("Zone recovery check - Entry price: ", entryPrice, ", Current price: ", currentPrice, 
            ", Distance in points: ", distance, ", Required zone size: ", ZoneSize);
   }
   
   // Removed MaxTrades check - If price moved against us by ZoneSize points, immediately open a recovery trade
   if((zoneDirection == 1 && currentPrice < entryPrice - ZoneSize * point) ||
      (zoneDirection == -1 && currentPrice > entryPrice + ZoneSize * point))
   {
      // No delay between trades - immediately open a recovery trade
      OpenRecoveryTrade();
      lastActionTime = TimeCurrent();
   }
   
   // Apply trailing stop if enabled
   if(UseTrailingStop && totalProfit > 0)
   {
      ApplyTrailingStop();
   }
   
   // Apply break even if enabled
   if(totalProfit > BreakEvenProfit * point)
   {
      ApplyBreakEven();
   }
}

//+------------------------------------------------------------------+
//| Open a recovery trade for zone recovery                           |
//+------------------------------------------------------------------+
void OpenRecoveryTrade()
{
   // Calculate recovery lot size based on previous trades
   double recoveryLot = InitialLot * MathPow(LotMultiplier, totalTrades);
   
   // Normalize lot size according to broker restrictions
   double minLot = SymbolInfoDouble(_Symbol, SYMBOL_VOLUME_MIN);
   double maxLot = SymbolInfoDouble(_Symbol, SYMBOL_VOLUME_MAX);
   double lotStep = SymbolInfoDouble(_Symbol, SYMBOL_VOLUME_STEP);
   
   recoveryLot = MathMin(maxLot, MathMax(minLot, NormalizeDouble(recoveryLot, 2)));
   
   // Set up trading parameters
   double sl = 0.0; // No stop loss for zone recovery
   double tp = 0.0;
   ENUM_POSITION_TYPE type;
   
   // Open trade in the same direction as the current series
   // This is important for zone recovery/grid strategy
   if(zoneDirection == 1) // Current series is BUY, open another BUY
   {
      type = POSITION_TYPE_BUY;
      tp = SymbolInfoDouble(_Symbol, SYMBOL_ASK) + TakeProfit * point;
   }
   else // Current series is SELL, open another SELL
   {
      type = POSITION_TYPE_SELL;
      tp = SymbolInfoDouble(_Symbol, SYMBOL_BID) - TakeProfit * point;
   }
   
   Print("Opening recovery trade: Type: ", EnumToString(type), ", Lot: ", recoveryLot, 
         ", TP: ", tp);
   
   // Execute trade using CTrade
   bool result = false;
   if(type == POSITION_TYPE_BUY)
      result = trade.Buy(recoveryLot, _Symbol, 0, sl, tp, "Zone Recovery");
   else
      result = trade.Sell(recoveryLot, _Symbol, 0, sl, tp, "Zone Recovery");
   
   // Check result
   if(result)
   {
      Print("Recovery trade executed: ", EnumToString(type), ", Lot: ", recoveryLot, 
            ", Result: ", trade.ResultRetcode(), ", Ticket: ", trade.ResultOrder());
      totalTrades++;
   }
   else
   {
      Print("Error opening recovery trade: ", GetLastError(), 
            ", Code: ", trade.ResultRetcode(), ", Comment: ", trade.ResultComment());
      
      // Print trade context and error details
      PrintTradeContextError();
   }
}

//+------------------------------------------------------------------+
//| Calculate the total profit of all trades in the series            |
//+------------------------------------------------------------------+
double CalculateTotalProfit()
{
   double profit = 0;
   
   for(int i = PositionsTotal() - 1; i >= 0; i--)
   {
      ulong ticket = PositionGetTicket(i);
      if(PositionSelectByTicket(ticket))
      {
         long magic = PositionGetInteger(POSITION_MAGIC);
         string symbol = PositionGetString(POSITION_SYMBOL);
         
         if(magic == zoneRecoveryMagic && symbol == _Symbol)
         {
            profit += PositionGetDouble(POSITION_PROFIT);
         }
      }
   }
   
   return profit;
}

//+------------------------------------------------------------------+
//| Get the average entry price of all trades                         |
//+------------------------------------------------------------------+
double GetAverageEntryPrice()
{
   double totalVolume = 0;
   double volumeWeightedPrice = 0;
   
   for(int i = PositionsTotal() - 1; i >= 0; i--)
   {
      ulong ticket = PositionGetTicket(i);
      if(PositionSelectByTicket(ticket))
      {
         long magic = PositionGetInteger(POSITION_MAGIC);
         string symbol = PositionGetString(POSITION_SYMBOL);
         
         if(magic == zoneRecoveryMagic && symbol == _Symbol)
         {
            double volume = PositionGetDouble(POSITION_VOLUME);
            double openPrice = PositionGetDouble(POSITION_PRICE_OPEN);
            
            totalVolume += volume;
            volumeWeightedPrice += volume * openPrice;
         }
      }
   }
   
   if(totalVolume > 0)
      return volumeWeightedPrice / totalVolume;
      
   return 0;
}

//+------------------------------------------------------------------+
//| Close all trades in the current zone recovery series              |
//+------------------------------------------------------------------+
bool CloseAllTrades()
{
   bool success = true;
   
   // Create an array to store positions to close
   ulong tickets[];
   int count = 0;
   
   // First, collect all position tickets
   for(int i = PositionsTotal() - 1; i >= 0; i--)
   {
      ulong ticket = PositionGetTicket(i);
      if(PositionSelectByTicket(ticket))
      {
         long magic = PositionGetInteger(POSITION_MAGIC);
         string symbol = PositionGetString(POSITION_SYMBOL);
         
         if(magic == zoneRecoveryMagic && symbol == _Symbol)
         {
            // Resize array and add ticket
            ArrayResize(tickets, count + 1);
            tickets[count] = ticket;
            count++;
         }
      }
   }
   
   Print("Attempting to close ", count, " trades");
   
   // Now close all positions
   for(int i = 0; i < count; i++)
   {
      if(PositionSelectByTicket(tickets[i]))
      {
         // Use CTrade to close position
         if(!trade.PositionClose(tickets[i]))
         {
            Print("Error closing position ", tickets[i], ": ", GetLastError(), 
                  ", Code: ", trade.ResultRetcode(), ", Comment: ", trade.ResultComment());
            success = false;
         }
         else
         {
            Print("Position closed: ", tickets[i]);
         }
      }
   }
   
   return success;
}

//+------------------------------------------------------------------+
//| Apply trailing stop to all trades                                 |
//+------------------------------------------------------------------+
void ApplyTrailingStop()
{
   for(int i = PositionsTotal() - 1; i >= 0; i--)
   {
      ulong ticket = PositionGetTicket(i);
      if(PositionSelectByTicket(ticket))
      {
         long magic = PositionGetInteger(POSITION_MAGIC);
         string symbol = PositionGetString(POSITION_SYMBOL);
         
         if(magic == zoneRecoveryMagic && symbol == _Symbol)
         {
            double currentSL = PositionGetDouble(POSITION_SL);
            double openPrice = PositionGetDouble(POSITION_PRICE_OPEN);
            ENUM_POSITION_TYPE posType = (ENUM_POSITION_TYPE)PositionGetInteger(POSITION_TYPE);
            
            double newSL = 0;
            bool modifyFlag = false;
            
            // Calculate new stop loss based on position type
            if(posType == POSITION_TYPE_BUY)
            {
               double bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
               
               // Only apply trailing stop if price moved in favorable direction
               if(bid > openPrice + TrailingDistance * point)
               {
                  newSL = NormalizeDouble(bid - TrailingDistance * point, _Digits);
                  
                  // Only modify if the new SL is higher than the current one
                  if(currentSL < newSL || currentSL == 0)
                     modifyFlag = true;
               }
            }
            else // POSITION_TYPE_SELL
            {
               double ask = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
               
               // Only apply trailing stop if price moved in favorable direction
               if(ask < openPrice - TrailingDistance * point)
               {
                  newSL = NormalizeDouble(ask + TrailingDistance * point, _Digits);
                  
                  // Only modify if the new SL is lower than the current one or not set
                  if(currentSL > newSL || currentSL == 0)
                     modifyFlag = true;
               }
            }
            
            // Modify position if needed
            if(modifyFlag)
            {
               if(!trade.PositionModify(ticket, newSL, PositionGetDouble(POSITION_TP)))
               {
                  Print("Error modifying SL: ", GetLastError(), 
                        ", Code: ", trade.ResultRetcode(), ", Comment: ", trade.ResultComment());
               }
               else
               {
                  Print("Modified trailing stop for position ", ticket, " to ", newSL);
               }
            }
         }
      }
   }
}

//+------------------------------------------------------------------+
//| Apply break even to all trades                                    |
//+------------------------------------------------------------------+
void ApplyBreakEven()
{
   for(int i = PositionsTotal() - 1; i >= 0; i--)
   {
      ulong ticket = PositionGetTicket(i);
      if(PositionSelectByTicket(ticket))
      {
         long magic = PositionGetInteger(POSITION_MAGIC);
         string symbol = PositionGetString(POSITION_SYMBOL);
         
         if(magic == zoneRecoveryMagic && symbol == _Symbol)
         {
            double currentSL = PositionGetDouble(POSITION_SL);
            double openPrice = PositionGetDouble(POSITION_PRICE_OPEN);
            ENUM_POSITION_TYPE posType = (ENUM_POSITION_TYPE)PositionGetInteger(POSITION_TYPE);
            
            double newSL = 0;
            bool modifyFlag = false;
            
            // Set break even SL
            if(posType == POSITION_TYPE_BUY)
            {
               newSL = openPrice + BreakEvenDistance * point;
               
               // Only modify if the new SL is higher than the current one or not set
               if(currentSL < newSL || currentSL == 0)
                  modifyFlag = true;
            }
            else // POSITION_TYPE_SELL
            {
               newSL = openPrice - BreakEvenDistance * point;
               
               // Only modify if the new SL is lower than the current one or not set
               if(currentSL > newSL || currentSL == 0)
                  modifyFlag = true;
            }
            
            // Modify position if needed
            if(modifyFlag)
            {
               if(!trade.PositionModify(ticket, newSL, PositionGetDouble(POSITION_TP)))
               {
                  Print("Error setting break even: ", GetLastError(), 
                        ", Code: ", trade.ResultRetcode(), ", Comment: ", trade.ResultComment());
               }
               else
               {
                  Print("Modified position ", ticket, " to break even at ", newSL);
               }
            }
         }
      }
   }
}
//+------------------------------------------------------------------+
